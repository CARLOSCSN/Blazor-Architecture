@page "/venda"
@using Common.ViewModel
@using System.Threading;

@inject HttpClient Http
@inject IJSRuntime JSRuntime

@inject NavigationManager navigationManager
@inject WebApiServices webApiServices
@inject IMatToaster matToaster

<div class="mb-20">
    <h1>Vendas</h1>
    <p>Lista de vendas.</p>
</div>

@if (vendas == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <MatTable Class="mat-elevation-z5 table table-striped table-hover"
              Items="@vendas"
              LoadInitialData="true"
              Striped="true"
              DebounceMilliseconds="150"
              PageSize="5"
              PageRecordCountLabel="Itens por página:"
              PageLabel="Página"
              FilterByColumnName="NomeCliente"
              SearchTermFieldPlaceHolder="Cliente"
              SearchTermFieldLabel="Pesquisar">
        <MatTableHeader>
            <th>
                <div style="width:135px;">
                    <MatButton class="btn btn-default"
                               @onclick="@( () => OpenModal(1))"
                               Icon="playlist_add"
                               Label="Adicionar"
                               Raised="true">
                    </MatButton>
                </div>
            </th>
            <th>
                <div style="width:150px;">
                    Venda ID
                </div>
            </th>
            <th>
                <div style="width:150px;">
                    Nota Fiscal
                </div>
            </th>
            <th>
                <div style="width:150px;">
                    Data N.F
                </div>
            </th>
            <th>
                <div style="width:150px;">
                    Valor Venda
                </div>
            </th>
            <th>
                <div style="width:400px;">
                    Cliente
                </div>
            </th>
            @*<th>Valor Compra</th>
                <th>% Imposto</th>
                <th>Frete 01</th>
                <th>Frete 02</th>
                <th>% C.O</th>
                <th>Outras Despesas</th>
                <th>Custo Total</th>
                <th>% Comissão</th>
                <th>Valor Comissão</th>
                <th>% Lucro</th>
                <th>Valor Lucro</th>
                <th>Descrição</th>*@
        </MatTableHeader>
        <MatTableRow Context="venda">
            <td>
                <MatIconButton Icon="delete"></MatIconButton>
            </td>
            <td>@venda.VendaId</td>
            <td>@venda.NumeroNotaFiscal</td>
            <td>@venda.DataNF.ToString("dd//MM/yyyy")</td>
            <td>@venda.ValorVenda</td>
            <td>@venda.NomeCliente</td>
            @*<td>@venda.ValorCompra</td>
                <td>@venda.PercentualImposto</td>
                <td>@venda.ValorFrete1</td>
                <td>@venda.ValorFrete2</td>
                <td>@venda.PercentualCustoOperacional</td>
                <td>@venda.ValorOutrasDespesas</td>
                <td>@venda.ValorCustoTotal</td>
                <td>@venda.PercentualComissao</td>
                <td>@venda.ValorComissao</td>
                <td>@venda.PercentualLucro</td>
                <td>@venda.ValorLucro</td>
                <td>@venda.Descricao</td>*@
        </MatTableRow>
    </MatTable>
}

@if (modalOpen)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog modal-max">
            <div class="modal-content">

                <div class="panel panel-filled">
                    <div class="panel-heading">
                        <div class="panel-tools">
                            <a class="panel-close" @onclick="CloseModal"><i class="fa fa-times"></i></a>
                        </div>
                        <h3 class="modal-title">@modalTitle</h3>
                    </div>
                    <br />
                    <div class="panel-body">

                        <EditForm Model="@model"
                                  OnValidSubmit="@HandleValidSubmit"
                                  OnInvalidSubmit="@HandleInvalidSubmit">

                            <FluentValidationValidator />

                            <div class="row mb-20">
                                <div class="form-group">
                                    <div class="col-lg-2">
                                        <SwInputText Label="N.F"
                                                     Name="NumeroNotaFiscal"
                                                     @bind-Value="model.NumeroNotaFiscal"
                                                     ValidationFor="@(() => model.NumeroNotaFiscal)" />
                                    </div>
                                    <div class="col-lg-3">
                                        <p>
                                            <label for="DataNF">Data N.F</label>
                                            <MatDatePicker Required="true"
                                                           Id="DataNF"
                                                           name="DataNF"
                                                           AllowInput="false"
                                                           Format="dd/MM/yyyy"
                                                           @bind-Value="model.DataNF">
                                            </MatDatePicker>
                                            <ValidationMessage For="(() => model.DataNF)" />
                                        </p>
                                    </div>
                                    <div class="col-lg-5">
                                        <SwInputText Label="Cliente"
                                                     Name="NomeCliente"
                                                     @bind-Value="model.NomeCliente"
                                                     ValidationFor="@(() => model.NomeCliente)" />

                                    </div>
                                    <div class="col-lg-2">
                                        <InputMoney Label="Valor Venda"
                                                    Name="ValorVenda"
                                                    OnFocusOutFunc="CalcularValores"
                                                    FunctionJSRuntime="applyMaskMoney"
                                                    @bind-Value="@model.ValorVenda"
                                                    ValidationFor="@(() => model.ValorVenda)" />
                                    </div>
                                </div>
                            </div>

                            <div class="row mb-20">
                                <div class="form-group">
                                    <div class="col-lg-2">
                                        <InputMoney Label="Valor Compra"
                                                    Name="ValorCompra"
                                                    OnFocusOutFunc="CalcularValores"
                                                    FunctionJSRuntime="applyMaskMoney"
                                                    @bind-Value="@model.ValorCompra"
                                                    ValidationFor="@(() => model.ValorCompra)" />
                                    </div>
                                    <div class="col-lg-1">
                                        <SwInputText Label="% Imposto"
                                                     Name="PercentualImposto"
                                                     OnFocusOutFunc="CalcularValores"
                                                     @bind-Value="model.PercentualImposto"
                                                     ValidationFor="@(() => model.PercentualImposto)" />
                                    </div>
                                    <div class="col-lg-2">
                                        <InputMoney Label="Frete 01"
                                                    Name="ValorFrete1"
                                                    OnFocusOutFunc="CalcularValores"
                                                    FunctionJSRuntime="applyMaskMoney"
                                                    @bind-Value="@model.ValorFrete1"
                                                    ValidationFor="@(() => model.ValorFrete1)" />

                                    </div>
                                    <div class="col-lg-2">
                                        <InputMoney Label="Frete 02"
                                                    Name="ValorFrete2"
                                                    OnFocusOutFunc="CalcularValores"
                                                    FunctionJSRuntime="applyMaskMoney"
                                                    @bind-Value="@model.ValorFrete2"
                                                    ValidationFor="@(() => model.ValorFrete2)" />
                                    </div>
                                    <div class="col-lg-1">
                                        <SwInputText Label="% C.O"
                                                     Name="PercentualCustoOperacional"
                                                     OnFocusOutFunc="CalcularValores"
                                                     @bind-Value="model.PercentualCustoOperacional"
                                                     ValidationFor="@(() => model.PercentualCustoOperacional)" />
                                    </div>
                                    <div class="col-lg-2">
                                        <InputMoney Label="Valor Outras Despesas"
                                                    Name="ValorOutrasDespesas"
                                                    OnFocusOutFunc="CalcularValores"
                                                    FunctionJSRuntime="applyMaskMoney"
                                                    @bind-Value="@model.ValorOutrasDespesas"
                                                    ValidationFor="@(() => model.ValorOutrasDespesas)" />

                                    </div>
                                    <div class="col-lg-2">
                                        <SwInputText Label="% Comissão"
                                                     Name="PercentualComissao"
                                                     OnFocusOutFunc="CalcularValores"
                                                     @bind-Value="model.PercentualComissao"
                                                     ValidationFor="@(() => model.PercentualComissao)" />
                                    </div>
                                </div>
                            </div>

                            <div class="row mb-20">
                                <div class="form-group">
                                    <div class="col-lg-2">
                                        <InputMoney Label="Valor Comissão"
                                                    Name="ValorComissao"
                                                    Readonly="true"
                                                    FunctionJSRuntime="applyMaskMoney"
                                                    @bind-Value="@model.ValorComissao"
                                                    ValidationFor="@(() => model.ValorComissao)" />
                                    </div>
                                    <div class="col-lg-2">
                                        <InputMoney Label="Custo Total"
                                                    Name="ValorCustoTotal"
                                                    OnFocusOutFunc="CalcularValores"
                                                    Readonly="true"
                                                    FunctionJSRuntime="applyMaskMoney"
                                                    @bind-Value="@model.ValorCustoTotal"
                                                    ValidationFor="@(() => model.ValorCustoTotal)" />
                                    </div>
                                    <div class="col-lg-1">
                                        <SwInputText Label="% Lucro"
                                                     Name="PercentualLucro"
                                                     Readonly="true"
                                                     @bind-Value="model.PercentualLucro"
                                                     ValidationFor="@(() => model.PercentualLucro)" />
                                    </div>
                                    <div class="col-lg-2">
                                        <InputMoney Label="Valor Lucro"
                                                    Name="ValorLucro"
                                                    Readonly="true"
                                                    FunctionJSRuntime="applyMaskMoney"
                                                    @bind-Value="@model.ValorLucro"
                                                    ValidationFor="@(() => model.ValorLucro)" />
                                    </div>
                                </div>
                            </div>

                            <div class="row mb-20">
                                <div class=form-group>
                                    <div class="col-lg-12">
                                        <label for="Descricao">Descrição</label>
                                        <InputTextArea class="form-control"
                                                       rows="3"
                                                       @bind-Value="model.Descricao"></InputTextArea>
                                        <ValidationMessage For="(() => model.Descricao)" />
                                    </div>
                                </div>
                            </div>

                            <div class="pull-right mb-20">
                                <button type="submit" class="btn btn-accent">Salvar</button>
                            </div>

                        </EditForm>
                    </div>
                </div>

            </div>
        </div>
    </div>
}

@code {
    private EditContext editContext;
    private VendaViewModel model = new VendaViewModel();
    private VendaViewModel[] vendas;
    private bool modalOpen { get; set; }
    private string modalTitle { get; set; }

    protected async Task HandleValidSubmit()
    {
        try
        {
            CalcularValores();
            Thread.Sleep(100);

            await webApiServices.Post<VendaViewModel>(model, "api/Venda");
            navigationManager.NavigateTo("/venda");

            CloseModal();
            matToaster.Add("Venda cadastrada.", MatToastType.Success, "Sucesso");
            vendas = await Http.GetJsonAsync<VendaViewModel[]>("https://localhost:44301/api/Venda");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            matToaster.Add(ex.Message, MatToastType.Danger, "Erro");
            Console.WriteLine(ex.Message);
        }
    }

    protected void HandleInvalidSubmit()
    {
        matToaster.Add("Não foi possivel realizar o cadastro.", MatToastType.Warning, "Atenção");
    }

    protected override async Task OnInitializedAsync()
    {
        vendas = await Http.GetJsonAsync<VendaViewModel[]>("https://localhost:44301/api/Venda");
        editContext = new EditContext(model);

        base.OnInitialized();
    }

    protected override void OnAfterRender(bool param)
    {
        base.OnAfterRender(true);
    }

    protected void OpenModal(int hash)
    {
        this.model = new VendaViewModel();
        this.modalTitle = "Cadastro de Venda";
        this.modalOpen = true;
    }

    protected void CloseModal()
    {
        this.modalOpen = false;
        StateHasChanged();
    }

    private void CalcularValores()
    {
        var vlrImposto = ((model.PercentualImposto * model.ValorVenda) / 100);
        var vlrVendaMaisImp = model.ValorVenda + vlrImposto;
        var vlrCustoOperac = ((model.PercentualCustoOperacional * vlrVendaMaisImp) / 100);

        model.ValorCustoTotal = model.ValorCompra + model.ValorFrete1 + model.ValorFrete2
            + vlrImposto + vlrCustoOperac + model.ValorOutrasDespesas + model.ValorComissao;

        model.ValorComissao = ((model.PercentualComissao * model.ValorVenda) / 100);

        model.ValorLucro = model.ValorVenda - model.ValorCustoTotal;

        model.PercentualLucro = model.ValorLucro == 0 ? 0 : ((model.ValorLucro / model.ValorVenda) * 100);


        // Arredondamento duas casas decimais.
        model.ValorCustoTotal = Math.Round(model.ValorCustoTotal, 2);
        model.ValorComissao = Math.Round(model.ValorComissao, 2);
        model.ValorLucro = Math.Round(model.ValorLucro, 2);
        model.PercentualLucro = Math.Round(model.PercentualLucro, 2);

        StateHasChanged();
    }
}

