@using System.Linq.Expressions
@using System.Globalization;

@typeparam T
@inherits InputBase<T>

<!-- Control with label -->
    <div class="form-control-wrapper">
        @if (!string.IsNullOrWhiteSpace(Label))
        {
            <label class="form-control-label" for="@uniqueId">@Label</label>
        }

        <input class="form-control @CssClass" id="@uniqueId" name="@Name"
               @onblur="@OnFocusOutFunc"
               @onfocusout="@OnFocusOutFunc"
               @bind-value="CurrentValueAsString"
               readonly="@Readonly" />

        <div class="form-control-validation">
            <ValidationMessage For="@ValidationFor" />
        </div>
    </div>


@code {

    [Parameter] public string Id { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public string Name { get; set; }
    [Parameter] public Expression<Func<T>> ValidationFor { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public bool ShowDefaultOpton { get; set; } = true;
    [Parameter] public bool Readonly { get; set; } = false;
    [Parameter] public EventCallback OnFocusOutFunc { get; set; }

    private string uniqueId = Guid.NewGuid().ToString("N");


    //protected override async Task OnInitializedAsync()
    //{
    //    base.OnInitialized();
    //}

    //protected override void OnAfterRender(bool param)
    //{
    //    base.OnAfterRender(true);
    //}

    protected override bool TryParseValueFromString(string value, out T result, out string validationErrorMessage)
    {
        if (typeof(T) == typeof(string))
        {
            result = (T)(object)value;
            validationErrorMessage = null;

            return true;
        }
        else if (typeof(T) == typeof(int))
        {
            int.TryParse(value, NumberStyles.Integer, CultureInfo.InvariantCulture, out var parsedValue);
            result = (T)(object)parsedValue;
            validationErrorMessage = null;

            return true;
        }
        else if (typeof(T) == typeof(decimal))
        {
            decimal.TryParse(value, NumberStyles.Float, CultureInfo.InvariantCulture, out var parsedValue);
            result = (T)(object)parsedValue;
            validationErrorMessage = null;

            return true;
        }
        else if (typeof(T) == typeof(double))
        {
            double.TryParse(value, NumberStyles.Float, CultureInfo.InvariantCulture, out var parsedValue);
            result = (T)(object)parsedValue;
            validationErrorMessage = null;

            return true;
        }
        else if (typeof(T) == typeof(Guid))
        {
            Guid.TryParse(value, out var parsedValue);
            result = (T)(object)parsedValue;
            validationErrorMessage = null;

            return true;
        }
        else if (typeof(T).IsEnum)
        {
            // There's no non-generic Enum.TryParse (https://github.com/dotnet/corefx/issues/692)
            try
            {
                result = (T)Enum.Parse(typeof(T), value);
                validationErrorMessage = null;

                return true;
            }
            catch (ArgumentException)
            {
                result = default;
                validationErrorMessage = $"The {FieldIdentifier.FieldName} field is not valid.";

                return false;
            }
        }
        else
        {
            result = (T)(object)null;
            validationErrorMessage = $"{GetType()} não suporta o tipo '{typeof(T)}'.";

            return false;
        }
    }

}
